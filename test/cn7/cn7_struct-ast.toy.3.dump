module {
  mytoy.func private @multiply_transpose(%arg0: !mytoy.struct<tensor<*xf64>, tensor<*xf64>>) -> tensor<*xf64> {
    %0 = mytoy.struct_access %arg0[0] : !mytoy.struct<tensor<*xf64>, tensor<*xf64>> -> tensor<*xf64>
    %1 = mytoy.transpose(%0 : tensor<*xf64>) to tensor<*xf64>
    %2 = mytoy.struct_access %arg0[1] : !mytoy.struct<tensor<*xf64>, tensor<*xf64>> -> tensor<*xf64>
    %3 = mytoy.transpose(%2 : tensor<*xf64>) to tensor<*xf64>
    %4 = mytoy.mul %1, %3 : tensor<*xf64>
    mytoy.return %4 : tensor<*xf64>
  }
  mytoy.func @main() {
    %0 = mytoy.struct_constant [dense<[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>, dense<[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>] : !mytoy.struct<tensor<*xf64>, tensor<*xf64>>
    %1 = mytoy.generic_call @multiply_transpose(%0) : (!mytoy.struct<tensor<*xf64>, tensor<*xf64>>) -> tensor<*xf64>
    mytoy.print %1 : tensor<*xf64>
    mytoy.return
  }
}

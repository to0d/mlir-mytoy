# RUN: mytoy %s -emit=mlir 2>&1 | FileCheck %s

# User defined generic function that operates on unknown shaped arguments
def transpose_transpose(x) {
  return transpose(transpose(x));
}

def main() {
  var a<2, 3> = [[1, 2, 3], [4, 5, 6]];
  var b = transpose_transpose(a);
  print(b);
}

# CHECK-LABEL: mytoy.func @transpose_transpose(
# CHECK-SAME:                                [[VAL_0:%.*]]: tensor<*xf64>) -> tensor<*xf64> {
# CHECK-NEXT:    [[VAL_1:%.*]] = mytoy.transpose([[VAL_0]] : tensor<*xf64>) to tensor<*xf64>
# CHECK-NEXT:    [[VAL_2:%.*]] = mytoy.transpose([[VAL_1]] : tensor<*xf64>) to tensor<*xf64>
# CHECK-NEXT:    mytoy.return [[VAL_2:%.*]] : tensor<*xf64>

# CHECK-LABEL:  mytoy.func @main() {
# CHECK-NEXT:    [[VAL_3:%.*]] = mytoy.constant dense<{{\[\[}}1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>
# CHECK-NEXT:    [[VAL_4:%.*]] = mytoy.reshape([[VAL_3]] : tensor<2x3xf64>) to tensor<2x3xf64>
# CHECK-NEXT:    [[VAL_5:%.*]] = mytoy.generic_call @transpose_transpose([[VAL_4]]) : (tensor<2x3xf64>) -> tensor<*xf64>
# CHECK-NEXT:    mytoy.print [[VAL_5]] : tensor<*xf64>
# CHECK-NEXT:    mytoy.return
# CHECK-NEXT:  }
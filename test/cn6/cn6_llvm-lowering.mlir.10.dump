; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@nl = internal constant [2 x i8] c"\0A\00"
@frmt_spec = internal constant [4 x i8] c"%f \00"

declare ptr @malloc(i64)

declare void @free(ptr)

declare i32 @printf(ptr, ...)

define void @main() {
  %1 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (double, ptr null, i64 6) to i64))
  %2 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %1, 0
  %3 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %2, ptr %1, 1
  %4 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %3, i64 0, 2
  %5 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %4, i64 3, 3, 0
  %6 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %5, i64 2, 3, 1
  %7 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %6, i64 2, 4, 0
  %8 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %7, i64 1, 4, 1
  %9 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (double, ptr null, i64 6) to i64))
  %10 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %9, 0
  %11 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %10, ptr %9, 1
  %12 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %11, i64 0, 2
  %13 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %12, i64 3, 3, 0
  %14 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %13, i64 2, 3, 1
  %15 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %14, i64 2, 4, 0
  %16 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %15, i64 1, 4, 1
  %17 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (double, ptr null, i64 6) to i64))
  %18 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %17, 0
  %19 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %18, ptr %17, 1
  %20 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %19, i64 0, 2
  %21 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %20, i64 2, 3, 0
  %22 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %21, i64 3, 3, 1
  %23 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %22, i64 3, 4, 0
  %24 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %23, i64 1, 4, 1
  %25 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %24, 1
  %26 = getelementptr double, ptr %25, i64 0
  store double 1.000000e+00, ptr %26, align 8
  %27 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %24, 1
  %28 = getelementptr double, ptr %27, i64 1
  store double 2.000000e+00, ptr %28, align 8
  %29 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %24, 1
  %30 = getelementptr double, ptr %29, i64 2
  store double 3.000000e+00, ptr %30, align 8
  %31 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %24, 1
  %32 = getelementptr double, ptr %31, i64 3
  store double 4.000000e+00, ptr %32, align 8
  %33 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %24, 1
  %34 = getelementptr double, ptr %33, i64 4
  store double 5.000000e+00, ptr %34, align 8
  %35 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %24, 1
  %36 = getelementptr double, ptr %35, i64 5
  store double 6.000000e+00, ptr %36, align 8
  br label %37

37:                                               ; preds = %55, %0
  %38 = phi i64 [ 0, %0 ], [ %56, %55 ]
  %39 = icmp slt i64 %38, 3
  br i1 %39, label %40, label %57

40:                                               ; preds = %37
  br label %41

41:                                               ; preds = %44, %40
  %42 = phi i64 [ 0, %40 ], [ %54, %44 ]
  %43 = icmp slt i64 %42, 2
  br i1 %43, label %44, label %55

44:                                               ; preds = %41
  %45 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %24, 1
  %46 = mul i64 %42, 3
  %47 = add i64 %46, %38
  %48 = getelementptr double, ptr %45, i64 %47
  %49 = load double, ptr %48, align 8
  %50 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %16, 1
  %51 = mul i64 %38, 2
  %52 = add i64 %51, %42
  %53 = getelementptr double, ptr %50, i64 %52
  store double %49, ptr %53, align 8
  %54 = add i64 %42, 1
  br label %41

55:                                               ; preds = %41
  %56 = add i64 %38, 1
  br label %37

57:                                               ; preds = %37
  br label %58

58:                                               ; preds = %77, %57
  %59 = phi i64 [ 0, %57 ], [ %78, %77 ]
  %60 = icmp slt i64 %59, 3
  br i1 %60, label %61, label %79

61:                                               ; preds = %58
  br label %62

62:                                               ; preds = %65, %61
  %63 = phi i64 [ 0, %61 ], [ %76, %65 ]
  %64 = icmp slt i64 %63, 2
  br i1 %64, label %65, label %77

65:                                               ; preds = %62
  %66 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %16, 1
  %67 = mul i64 %59, 2
  %68 = add i64 %67, %63
  %69 = getelementptr double, ptr %66, i64 %68
  %70 = load double, ptr %69, align 8
  %71 = fmul double %70, %70
  %72 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %8, 1
  %73 = mul i64 %59, 2
  %74 = add i64 %73, %63
  %75 = getelementptr double, ptr %72, i64 %74
  store double %71, ptr %75, align 8
  %76 = add i64 %63, 1
  br label %62

77:                                               ; preds = %62
  %78 = add i64 %59, 1
  br label %58

79:                                               ; preds = %58
  br label %80

80:                                               ; preds = %95, %79
  %81 = phi i64 [ 0, %79 ], [ %97, %95 ]
  %82 = icmp slt i64 %81, 3
  br i1 %82, label %83, label %98

83:                                               ; preds = %80
  br label %84

84:                                               ; preds = %87, %83
  %85 = phi i64 [ 0, %83 ], [ %94, %87 ]
  %86 = icmp slt i64 %85, 2
  br i1 %86, label %87, label %95

87:                                               ; preds = %84
  %88 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %8, 1
  %89 = mul i64 %81, 2
  %90 = add i64 %89, %85
  %91 = getelementptr double, ptr %88, i64 %90
  %92 = load double, ptr %91, align 8
  %93 = call i32 (ptr, ...) @printf(ptr @frmt_spec, double %92)
  %94 = add i64 %85, 1
  br label %84

95:                                               ; preds = %84
  %96 = call i32 (ptr, ...) @printf(ptr @nl)
  %97 = add i64 %81, 1
  br label %80

98:                                               ; preds = %80
  %99 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %24, 0
  call void @free(ptr %99)
  %100 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %16, 0
  call void @free(ptr %100)
  %101 = extractvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %8, 0
  call void @free(ptr %101)
  ret void
}

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}

